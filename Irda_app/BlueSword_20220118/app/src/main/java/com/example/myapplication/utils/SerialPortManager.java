package com.example.myapplication.utils;import android.util.Log;import android.widget.Toast;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.Enumeration;import java.util.TooManyListenersException;import tw.com.prolific.driver.pl2303.PL2303Driver;/** * 串口管理主类，串口基础操作 * @author 钟三 */public class SerialPortManager {    PL2303Driver mSerial;    /**     * 关闭串口     *     * @param     *     */    public static void closePort(PL2303Driver mSerial) {        if (mSerial != null) {            mSerial.end();        }    }    /**     * 往串口发送数据     *     * @param     *     * @param order     *            待发送数据     */    public static void sendToPort(PL2303Driver mSerial, byte[] order) {        try {            int res = mSerial.write(order, order.length);            if( res<0 ) {                return;            }        } catch (Exception e) {            e.printStackTrace();        } finally {        }    }    /**     * 从串口读取数据,该方法读取后数据就没了     * @param     *     * @return 读取到的数据     */    public static byte[] readFromPort(PL2303Driver mSerial) {        byte[] bytes = {};        try {            // 缓冲区大小为一个字节            byte[] readBuffer = new byte[1];            int bytesNum = mSerial.read(readBuffer);            while (bytesNum > 0) {                bytes = ArrayUtils.concat(bytes, readBuffer);                bytesNum = mSerial.read(readBuffer);            }        } catch (Exception e) {            e.printStackTrace();        } finally {        }        return bytes;    }    /**     * 串口存在有效数据监听     */    public interface DataAvailableListener {        /**         * 串口存在有效数据         */        void dataAvailable();    }}
package com.example.myapplication.utils;import java.math.BigInteger;public class Hex {    //生成16进制    private static final char[] HEX = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',            'a', 'b', 'c', 'd', 'e', 'f' };    public static char[] encode(byte[] bytes) {        final int nBytes = bytes.length;        char[] result = new char[2 * nBytes];         //  1 hex contains two chars        //  hex = [0-f][0-f], e.g 0f or ff        int j = 0;        for (byte aByte : bytes) {                    // loop byte by byte            // 0xF0 = FFFF 0000            result[j++] = HEX[(0xF0 & aByte) >>> 4];    // get the top 4 bits, first half hex char            // 0x0F = 0000 FFFF            result[j++] = HEX[(0x0F & aByte)];          // get the bottom 4 bits, second half hex char            // combine first and second half, we get a complete hex        }        return result;    }    public static String hexToDec(String hex) {        BigInteger data = new BigInteger(hex,16);        return addZeroForNum(data.toString(10),8);    }    /**     * 字符串补0     * @param str     * @param strLength     * @return     */    public static String addZeroForNum(String str, int strLength)    {        int strLen =str.length();        if(strLen<strLength){            while(strLen<strLength){                StringBuffer sb=new StringBuffer();                sb.append("0").append(str);// 左补0               // sb.append(str).append("0");//右补0                str = sb.toString();                strLen = str.length();            }        }        str = String.format(str).toUpperCase();//转为大写        return str;    }    public static int hexToDecimal(String hex)    {        int decimalValue=0;        for(int i=0;i<hex.length();i++)        {            char hexChar=hex.charAt(i);            decimalValue=decimalValue*16+hexCharToDecimal(hexChar);        }        return decimalValue;    }    public static int hexCharToDecimal(char hexChar)    {        if(hexChar>='A'&&hexChar<='F')            return 10+hexChar-'A';        else            return hexChar-'0';//切记不能写成int类型的0，因为字符'0'转换为int时值为48    }    private static String toHex(byte[] buf) {        StringBuilder sb = new StringBuilder();        for(int i=0;i<buf.length;i++) {            int high = ((buf[i]>>4) & 0x0f);// 取高4位            int low = buf[i] & 0x0f;  //取低4位            sb.append(high>9?((char)(high-10)+'a'):(char)(high+'0'));            sb.append(low>9?((char)(low-10)+'a'):(char)(low+'0'));        }        return sb.toString();    }////    //print hex string version of HELLO WORLD//    byte[] helloBytes = "HELLO WORLD".getBytes();//    String helloHex = DatatypeConverter.printHexBinary(helloBytes);//		System.out.printf("Hello hex: 0x%s\n", helloHex);////    //convert hex-encoded string back to original string//    byte[] decodedHex = DatatypeConverter.parseHexBinary(helloHex);//    String decodedString = new String(decodedHex, "UTF-8");//		System.out.printf("Hello decoded : %s\n", decodedString    /**     * Convert byte[] to hex string.这里我们可以将byte转换成int，然后利用Integer.toHexString(int)来转换成16进制字符串。     * @param src byte[] data     * @return hex string     */    public static String bytesToHexString(byte[] src){        StringBuilder stringBuilder = new StringBuilder("");        if (src == null || src.length <= 0) {            return null;        }        for (int i = 0; i < src.length; i++) {            int v = src[i] & 0xFF;            String hv = Integer.toHexString(v);            if (hv.length() < 2) {                stringBuilder.append(0);            }            stringBuilder.append(hv);        }        return stringBuilder.toString();    }    /**     * Convert hex string to byte[]     * @param hexString the hex string     * @return byte[]     */    public static byte[] hexStringToBytes(String hexString) {        if (hexString == null || hexString.equals("")) {            return null;        }        int strLength = hexString.length();//获取16进制字符串长度        int length = strLength / 2; //获取字节长度        char[] hexChars;//用来存放字符串转换成的字符数组        if (length * 2 < strLength) { // strLength is odd, add '0'            length += 1;            hexChars = ("0" + hexString).toCharArray();        } else {            hexChars =hexString.toCharArray();        }        byte[] bytes = new byte[length];//用来存放最终组成的数组        for (int i = 0; i < length; i++) {            int pos = i * 2;            //组成1字节的数据。因为是需要两个字符组成一个字节的数据，这就需要第一个字符向左移4位。            bytes[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));        }        return bytes;    }    //高位在前，低位在后    public static int bytes2int(byte[] bytes){        int result = 0;        if(bytes.length == 4){            int a = (bytes[0] & 0xff) << 24;//说明二            int b = (bytes[1] & 0xff) << 16;            int c = (bytes[2] & 0xff) << 8;            int d = (bytes[3] & 0xff);            result = a | b | c | d;        }        return result;    }    /**     * byte数组转成字符串     *     * @param bytes     数组     * @param isCaptial 使用大写还是小写表示     * @return 转换后的字符串     */    public static String bytesToHexStr(byte[] bytes, boolean isCaptial) {        if (null == bytes || bytes.length <= 0) {            return null;        }        StringBuilder s = new StringBuilder();        for (int i = 0; i < bytes.length; i++) {            if (isCaptial) {                //02表示使用2位16进制字符表示当前的byte数据，X或者x表示16进制字符串                s.append(String.format("%02X", bytes[i]));            } else {                s.append(String.format("%02x", bytes[i]));            }        }        return s.toString();    }    /**     * Convert char to byte     * @param c char     * @return byte     */    private static byte charToByte(char c) {        return (byte) "0123456789ABCDEF".indexOf(c);    }    //解码16进制    public static byte[] decode(CharSequence s) {        int nChars = s.length();        if (nChars % 2 != 0) {            throw new IllegalArgumentException(                    "Hex-encoded string must have an even number of characters");        }        byte[] result = new byte[nChars / 2];                                  // 1 hex = 2 char        for (int i = 0; i < nChars; i += 2) {                                  // step 2, 1 hex = 2 char            int msb = Character.digit(s.charAt(i), 16);                         // char -> hex, base16            int lsb = Character.digit(s.charAt(i + 1), 16);            if (msb < 0 || lsb < 0) {                throw new IllegalArgumentException(                        "Detected a Non-hex character at " + (i + 1) + " or " + (i + 2) + " position");            }            result[i / 2] = (byte) ((msb << 4) | lsb);        }        return result;    }    //获取高8位    public static int getHeightFour(byte data){        int height;        height = ((data & 0xFF) >> 8);        return height;    }    //获取低8位    public static int getLowFour(byte data){        int low;        low = (data & 0xFF);        return low;    }    /**     * Java将C语言16进制无符号数组转为字符串输出     * @param     * @return byte     */    private static String buling(String str){        return "0" + str;    }    public static String reverse(String s) {        String r = "";        for (int i = s.length() - 1; i >= 0; i--) {            char ch = s.charAt(i);            r = r + ch;        }        while (r.length() < 2) {            r = buling(r);        }        return r;    }    public static String decToHex(int dec) {        String hex = "";        while (dec >= 10) {            int remainder = dec % 16;            dec = dec / 16;            if (remainder < 10) {                hex += remainder;            } else {                char ch = (char) ('a' + (remainder - 10));                hex += ch;            }        }        if (dec != 0) {            hex += dec;        }        return reverse(hex);    }    public static void main(String[] args) {        String contractid = "";//        for (int i = 0; i < uidMeanBO.getContractid().length; i++) {//            contractid += decToHex(uidMeanBO.getContractid()[i]&0x0FF);//        }        System.out.println("contractid=" + contractid);    }}
package com.example.myapplication.fragment;import static android.app.Activity.RESULT_OK;import static java.util.stream.Collectors.toList;import android.Manifest;import android.annotation.SuppressLint;import android.app.Dialog;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.text.Editable;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.fragment.app.Fragment;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.myapplication.MainActivity;import com.example.myapplication.R;import com.example.myapplication.adapter.CustomAdapter;import com.example.myapplication.components.SegmentView;import com.example.myapplication.param.CodeParam;import com.example.myapplication.utils.ByteUtils;import com.example.myapplication.utils.CommomDialog;import com.google.gson.Gson;import com.huawei.hms.hmsscankit.ScanUtil;import com.huawei.hms.ml.scan.HmsScan;import com.huawei.hms.ml.scan.HmsScanAnalyzerOptions;import com.yanzhenjie.permission.AndPermission;import com.yanzhenjie.permission.PermissionListener;import com.youth.banner.Banner;import com.yzq.zxinglibrary.android.CaptureActivity;import com.yzq.zxinglibrary.bean.ZxingConfig;import com.yzq.zxinglibrary.common.Constant;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.Unbinder;/** * A simple {@link Fragment} subclass. * Use the {@link ScanCodeFragment#} factory method to * create an instance of this fragment. */public class ScanCodeFragment extends Fragment implements MainActivity.OnButtonClickedListener {    /******************************************************/    public static final int CAMERA_REQ_CODE = 112;    public static final int DECODE = 1;    private static final int REQUEST_CODE_SCAN_ONE = 0X01;    long POSITION_1;    /******************************************************/    @BindView(R.id.screcycler)    RecyclerView mRecyclerView;    @BindView(R.id.scmegmentview)    SegmentView segmentView;    @BindView(R.id.sendcode)    TextView sendView1;    @BindView(R.id.qxcode)    TextView qxcode;    @BindView(R.id.farthtext)    TextView farthtext;//    @BindView(R.id.screcycler)//    RecyclerView mRecyclerView2;    Unbinder unbinder;    private List<CodeParam> mdata = new ArrayList<CodeParam>();    private List<CodeParam> mdata2 = new ArrayList<CodeParam>();    private List<String> file1 = new ArrayList<String>();    private List<String> file2 = new ArrayList<String>();    private List<String> data1 = new ArrayList<String>();    private List<String> data2 = new ArrayList<String>();    private CustomAdapter mAdapter;    private CustomAdapter mAdapter2;    private Banner mBanner;    private Long firstBackTime = (long) 0;    private int REQUEST_CODE_SCAN = 111;    String TAG = "PL2303HXD_APLog";    private int POSITION = 0;    private int LOCATION = 1;    private String LOCAlTAG = "01";    private boolean netConnect = false;    private static final boolean SHOW_DEBUG = true;    private MainActivity mainActivity;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        View rootView = inflater.inflate(R.layout.fragment_scan_code, container, false);        unbinder = ButterKnife.bind(this, rootView);        initView();        initData();        return rootView;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //启动时判断网络状态        mainActivity = (MainActivity) getActivity();        mainActivity.setButtonClickedListener(ScanCodeFragment.this);        //MainActivity activity = (MainActivity) getActivity();//		MainActivity activity = (MainActivity) getActivity();///**// * 加监听// *///		activity.setButtonClickedListener(new MainActivity.OnButtonClickedListener() {////			@Override//			public void onclicked(boolean sj) {////				if (sj) {//					if (mainActivity.mSerial.isConnected()) {//						Drawable leftDrawable = getResources().getDrawable(R.drawable.selecttag);//						leftDrawable.setBounds(0, 0, 40, 40);//						if (farthtext!=null) {//							farthtext.setCompoundDrawables(null, null, leftDrawable, null);//						}//					}////				} else {////					Drawable leftDrawable = getResources().getDrawable(R.drawable.tag);//					leftDrawable.setBounds(0, 0, 40, 40);//					if (farthtext!=null) {//						farthtext.setCompoundDrawables(null, null, leftDrawable, null);//					}//				}//			}////		});    }    private void initView() {        // TextView textview= (TextView) getActivity().findViewById(R.id.farthtext);        // textview.setText("电辊筒扫码");        if (mainActivity.ISUSB && mainActivity.mSerial.isConnected()) {            if (mainActivity.mSerial.isConnected()) {                Drawable leftDrawable = getResources().getDrawable(R.drawable.selecttag);                leftDrawable.setBounds(0, 0, 40, 40);                farthtext.setCompoundDrawables(null, null, leftDrawable, null);            }        } else {            Drawable leftDrawable = getResources().getDrawable(R.drawable.tag);            leftDrawable.setBounds(0, 0, 40, 40);            farthtext.setCompoundDrawables(null, null, leftDrawable, null);        }        segmentView.contentView(new String[]{"线路一", "线路二"}, 16);        segmentView.setOnSegmentViewClickListener(new SegmentView.onSegmentViewClickListener() {            @Override            public void onSegmentViewClick(View view, int postion) {                //TextView textView = getActivity().findViewById(view.getId());                switch (postion) {                    case 0:                        postion = postion + 1;                        LOCATION = postion;                        LOCAlTAG = "01";                        initData();                        break;                    case 1:                        postion = postion + 1;                        LOCATION = postion;                        LOCAlTAG = "02";                        initData2();                        break;                }            }        });        //通过usb 写入数据到网关        sendView1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View arg0) {                if (!mainActivity.OlDBJ_CODE.equals("")) {                    //	if (mainActivity.OLDNET_CODE.equals("") && mainActivity.OLDNET_CODE.equals("01")) {                    StringBuilder sb = new StringBuilder();                    ByteUtils.geCreateComType(sb, "[");                    ByteUtils.geCreateComType(sb, "05");                    ByteUtils.geCreateComType(sb, ",");                    ByteUtils.geCreateComType(sb, LOCAlTAG);                    ByteUtils.geCreateComType(sb, ",");                    byte[] Utile = ByteUtils.StringToSixteen(mainActivity.OlDBJ_CODE);                    sb.append(ByteUtils.byteArrayToHexString(Utile));                    ByteUtils.geCreateComType(sb, ",");                    if (LOCAlTAG.equals("01")) {                        @SuppressLint({"NewApi", "LocalSuppress"})                        List<String> reduce1 = data1.stream().filter(item -> !file1.contains(item)).collect(toList());                        System.out.println("---差集 reduce1 (list1 - list2)---" + Arrays.toString(reduce1.toArray()));                        Gson g = new Gson();                        String jsonString = g.toJson(reduce1);                        String TS = "";                        if (reduce1.size() > 0) {                            TS = "板卡id" + jsonString + "未扫码您确定提交此信息？";                        } else {                            TS = "您确定提交此信息？";                        }                        new CommomDialog(getContext(), R.style.dialog, TS, new CommomDialog.OnCloseListener() {                            @Override                            public void onClick(Dialog dialog, boolean confirm) {                                if (confirm) {                                    if (mdata.size() > 0) {                                        for (CodeParam o : mdata) {                                            if (!o.getId().equals("") && !o.getDec().equals("")) {                                                ByteUtils.geCreateComType(sb, o.getId());                                                sb.append(ByteUtils.numToHex(Integer.parseInt(o.getDec().toString())));                                                ByteUtils.geCreateComType(sb, ",");                                            }                                        }                                    }                                    if (reduce1.size() > 0) {                                        for (String o : reduce1) {                                            ByteUtils.geCreateComType(sb, o);                                            sb.append("00000000");                                            ByteUtils.geCreateComType(sb, ",");                                        }                                    }                                    System.out.println("05数据发送" + sb.toString());                                    sb.delete(sb.length() - 2, sb.length());                                    ByteUtils.geCreateComType(sb, "]");                                    Handler handler = new Handler();                                    Runnable runnable = new Runnable() {                                        @Override                                        public void run() {                                            try {                                                System.out.println("05数据发送" + sb.toString());                                                String state = mainActivity.getStateFFromCode(sb);                                                String xl = "";                                                if (LOCAlTAG.equals("01")) {                                                    xl = "线路一";                                                }                                                if (LOCAlTAG.equals("02")) {                                                    xl = "线路二";                                                }                                                xl += xl;                                                if (state != "" && state.equals("01")) {                                                    xl += "保存成功!";                                                    Toast toast = Toast.makeText(getContext(),                                                            xl, Toast.LENGTH_LONG);                                                    ByteUtils.showMyToast(toast, 5 * 1000);                                                }                                                if (state != "" && state.equals("02")) {                                                    xl += "保存失败!";                                                    Toast toast = Toast.makeText(getContext(),                                                            xl, Toast.LENGTH_LONG);                                                    ByteUtils.showMyToast(toast, 5 * 1000);                                                }                                            } catch (Exception e) {                                                e.printStackTrace();                                            }                                            //设置延时5s再运行一次线程，构成了循环的效果                                            handler.postDelayed(this, 5000);                                            handler.removeCallbacks(this);                                        }                                    };                                    handler.post(runnable); //启动线程                                    dialog.dismiss();                                }                            }                        }).setTitle("提示").show();                    }                    if (LOCAlTAG.equals("02")) {                        @SuppressLint({"NewApi", "LocalSuppress"})                        List<String> reduce2 = data2.stream().filter(item -> !file2.contains(item)).collect(toList());                        Gson g = new Gson();                        String jsonString = g.toJson(reduce2);                        String TS = "";                        if (reduce2.size() > 0) {                            TS = "板卡id" + jsonString + "未扫码您确定提交此信息？";                        } else {                            TS = "您确定提交此信息？";                        }                        new CommomDialog(getContext(), R.style.dialog, TS, new CommomDialog.OnCloseListener() {                            @Override                            public void onClick(Dialog dialog, boolean confirm) {                                if (confirm) {                                    if (mdata2.size() > 0) {                                        for (CodeParam o : mdata2) {                                            if (!o.getId().equals("") && !o.getDec().equals("")) {                                                ByteUtils.geCreateComType(sb, o.getId());                                                sb.append(ByteUtils.numToHex(Integer.parseInt(o.getDec().toString())));                                                ByteUtils.geCreateComType(sb, ",");                                            }                                        }                                    }                                    if (reduce2.size() > 0) {                                        for (String o : reduce2) {                                            ByteUtils.geCreateComType(sb, o);                                            sb.append("00000000");                                            ByteUtils.geCreateComType(sb, ",");                                        }                                    }                                    sb.delete(sb.length() - 2, sb.length());                                    ByteUtils.geCreateComType(sb, "]");                                    Handler handler = new Handler();                                    Runnable runnable = new Runnable() {                                        @Override                                        public void run() {                                            try {                                                System.out.println("05数据发送" + sb.toString());                                                String state = mainActivity.getStateFFromCode(sb);                                                String xl = "";                                                if (LOCAlTAG.equals("01")) {                                                    xl = "线路一";                                                }                                                if (LOCAlTAG.equals("02")) {                                                    xl = "线路二";                                                }                                                xl += xl;                                                if (state != "" && state.equals("01")) {                                                    xl += "保存成功!";                                                    Toast toast = Toast.makeText(getContext(),                                                            xl, Toast.LENGTH_LONG);                                                    ByteUtils.showMyToast(toast, 5 * 1000);                                                }                                                if (state != "" && state.equals("02")) {                                                    xl += "保存失败!";                                                    Toast toast = Toast.makeText(getContext(),                                                            xl, Toast.LENGTH_LONG);                                                    ByteUtils.showMyToast(toast, 5 * 1000);                                                }                                            } catch (Exception e) {                                                e.printStackTrace();                                            }                                            //设置延时5s再运行一次线程，构成了循环的效果                                            handler.postDelayed(this, 5000);                                            handler.removeCallbacks(this);                                        }                                    };                                    handler.post(runnable); //启动线程                                    dialog.dismiss();                                }                            }                        }).setTitle("提示").show();                    }                } else {                    Toast toast = Toast.makeText(getContext(),                            "网关未连接，请重新获取！", Toast.LENGTH_LONG);                    ByteUtils.showMyToast(toast, 5 * 1000);                }            }        });        qxcode.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View arg0) {                if (LOCATION == 1) {                    if (mdata.size() > 0) {                        for (int i = 0; i < mdata.size(); i++) {                            CodeParam codeParam1 = mdata.get(i);                            if (!codeParam1.getId().equals("")) {                                codeParam1.setId("");                            } else if (!codeParam1.getDec().equals("")) {                                codeParam1.setDec("");                            }                            mdata.set(i, codeParam1);                            mAdapter.notifyItemChanged(i);                        }                    }                } else {                    if (mdata2.size() > 0) {                        for (int i = 0; i < mdata2.size(); i++) {                            CodeParam codeParam1 = mdata2.get(i);                            if (!codeParam1.getId().equals("")) {                                codeParam1.setId("");                            } else if (!codeParam1.getDec().equals("")) {                                codeParam1.setDec("");                            }                            mdata2.set(i, codeParam1);                            mAdapter2.notifyItemChanged(i);                        }                    }                }            }        });        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);        mRecyclerView.setLayoutManager(layoutManager);        mAdapter = new CustomAdapter(getContext(), mdata);        mAdapter2 = new CustomAdapter(getContext(), mdata2);        //添加自定义的分割线        DividerItemDecoration divider = new DividerItemDecoration(getContext(), DividerItemDecoration.VERTICAL);        //  divider.setDrawable(ContextCompat.getDrawable(getContext(), R.drawable.divider));        mRecyclerView.addItemDecoration(divider);        //  mRecyclerView.setAdapter(mAdapter);        mAdapter.setOnItemClickListener(new CustomAdapter.OnItemClickListener() {            @Override            public void onItemClick(View v, CustomAdapter.ViewName practise, long position) {                switch (v.getId()) {                    case R.id.erwm://                        AndPermission.with(getActivity())//                                .permission(Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE)//                                .callback(new PermissionListener() {//                                    @Override//                                    public void onSucceed(int requestCode, @NonNull List<String> grantPermissions) {//                                        Intent intent = new Intent(getActivity(), CaptureActivity.class);////                                        ZxingConfig config = new ZxingConfig();//                                        config.setPlayBeep(true);//                                        config.setShake(true);//                                        config.setLOCATION(LOCATION);//                                        config.setPOSITION(position);//                                        intent.putExtra(Constant.INTENT_ZXING_CONFIG, config);//                                        startActivityForResult(intent, REQUEST_CODE_SCAN);////                                    }////                                    @Override//                                    public void onFailed(int requestCode, @NonNull List<String> deniedPermissions) {////                                    }//                                }).start();                        /*************************************/                        LOCATION = 1;                        POSITION_1 = position;                        requestPermission(CAMERA_REQ_CODE, DECODE);                        /*************************************/                        break;                    default:                        break;                }            }        });        mAdapter.setItemClickListener(new CustomAdapter.ItemClickListener() {            @Override            public void onItemClick(Editable editable, int position) {                if (LOCATION == 1) {                    CodeParam codeParam1 = mdata.get(position);                    codeParam1.setId(editable.toString());                    mdata.set(position, codeParam1);                    mAdapter.notifyItemChanged(position);                } else {                    CodeParam codeParam1 = mdata2.get(position);                    codeParam1.setId(editable.toString());                    mdata2.set(position, codeParam1);                    mAdapter2.notifyItemChanged(position);                }            }        });        mAdapter2.setOnItemClickListener(new CustomAdapter.OnItemClickListener() {            @Override            public void onItemClick(View v, CustomAdapter.ViewName practise, long position) {                switch (v.getId()) {                    case R.id.erwm://                        AndPermission.with(getActivity())//                                .permission(Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE)//                                .callback(new PermissionListener() {//                                    @Override//                                    public void onSucceed(int requestCode, @NonNull List<String> grantPermissions) {//                                        Intent intent = new Intent(getActivity(), CaptureActivity.class);////                                        ZxingConfig config = new ZxingConfig();//                                        config.setPlayBeep(true);//                                        config.setShake(true);//                                        config.setLOCATION(LOCATION);//                                        config.setPOSITION(position);//                                        intent.putExtra(Constant.INTENT_ZXING_CONFIG, config);//                                        startActivityForResult(intent, REQUEST_CODE_SCAN);////                                    }////                                    @Override//                                    public void onFailed(int requestCode, @NonNull List<String> deniedPermissions) {////                                    }//                                }).start();                        /*************************************/                        LOCATION = 2;                        POSITION_1 = position;                        requestPermission(CAMERA_REQ_CODE, DECODE);                        /*************************************/                        break;                    default:                        break;                }            }        });        mAdapter2.setItemClickListener(new CustomAdapter.ItemClickListener() {            @Override            public void onItemClick(Editable editable, int position) {                if (LOCATION == 1) {                    CodeParam codeParam1 = mdata.get(position);                    codeParam1.setId(editable.toString());                    mdata.set(position, codeParam1);                    mAdapter.notifyItemChanged(position);                } else {                    CodeParam codeParam1 = mdata2.get(position);                    codeParam1.setId(editable.toString());                    mdata2.set(position, codeParam1);                    mAdapter2.notifyItemChanged(position);                }            }        });    }    /*********************************************************************/    //编辑请求权限    public void requestPermission(int requestCode, int mode) {        //ActivityCompat        Toast.makeText(getActivity(), "相机权限申请", Toast.LENGTH_SHORT).show();        if (ContextCompat.checkSelfPermission(getContext(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {            Toast.makeText(getActivity(), "打开相机扫码", Toast.LENGTH_SHORT).show();            ScanUtil.startScan(getActivity(), REQUEST_CODE_SCAN_ONE, new HmsScanAnalyzerOptions.Creator().create());        } else {            ActivityCompat.requestPermissions(                    /***************this*/                    /***************this*/                    // getActivity(),                    getActivity(),//                ShopCartFragment.this,                    new String[]{Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE},                    requestCode);        }    }    //权限申请返回    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        Toast.makeText(getActivity(), "相机权限返回", Toast.LENGTH_SHORT).show();        Toast.makeText(getActivity(), "相机权限返回2222", Toast.LENGTH_SHORT).show();        if (permissions == null || grantResults == null) {            return;        }//                                                           PackageManager        if (grantResults.length < 2 || grantResults[0] != PackageManager.PERMISSION_GRANTED || grantResults[1] != PackageManager.PERMISSION_GRANTED) {            return;        }        if (requestCode == CAMERA_REQ_CODE) {            //启动扫描Acticity//                  ScanUtil.startScan(this, REQUEST_CODE_SCAN_ONE, new HmsScanAnalyzerOptions.Creator().create());            /*************************this*/            /*************************this*///            ScanUtil.startScan(getActivity(), REQUEST_CODE_SCAN_ONE, new HmsScanAnalyzerOptions.Creator().create());            Toast.makeText(getActivity(), "打开相机扫码", Toast.LENGTH_SHORT).show();            ScanUtil.startScan(getActivity(), REQUEST_CODE_SCAN_ONE, new HmsScanAnalyzerOptions.Creator().create());        }    }    /*********************************************************************/    private void initData() {        if (mdata.size() > 0) {        } else {            for (int i = 0; i < 25; i++) {                CodeParam codeParam = new CodeParam();//                codeParam.setId("");                codeParam.setId(i + 1 + "");                codeParam.setTag(i + 1);                codeParam.setUid(String.valueOf(i + 1));                codeParam.setDec("");                mdata.add(codeParam);                data1.add(("" + (i + 1)));            }        }        mAdapter.setNewData(mdata);//模拟网络请求成功后要调用这个方法刷新数据        mRecyclerView.setAdapter(mAdapter);    }    private void initData2() {////        if (mainActivity.ISGETETCODE && !mainActivity.OlDBJ_CODE.equals("")) {////            if (mainActivity.OLDNET_CODE.equals("")&&mainActivity.OLDNET_CODE.equals("01")) {////                StringBuilder sb = new StringBuilder();//                ByteUtils.geCreateComType(sb,"[");//                ByteUtils.geCreateComType(sb,"03");//                ByteUtils.geCreateComType(sb,",");//                ByteUtils.geCreateComType(sb,LOCAlTAG);//                ByteUtils.geCreateComType(sb,",");//                byte[] Utile= ByteUtils.StringToSixteen(mainActivity.OlDBJ_CODE);//                sb.append(ByteUtils.byteArrayToHexString(Utile));//                ByteUtils.geCreateComType(sb,"]");////                Handler handler = new Handler();//                Runnable runnable = new Runnable() {//                    @Override//                    public void run() {//                        try {//                            Way way=  mainActivity.getListData(sb);//                            if(way!=null){//                                if (way.getCars().size()>0){//                                    for (Card card:way.getCars()) {//                                        CodeParam codeParam = new CodeParam();//                                        codeParam.setId(card.getMarkId());//                                        codeParam.setTag(Long.parseLong(card.getTag()));//                                        codeParam.setUid(card.getTag());//                                        codeParam.setDec(card.getMark());//                                        mdata2.add(codeParam);//                                    }//                                }////                            }else{////////                            }////                        } catch (Exception e) {//                            e.printStackTrace();//                        }////                        //设置延时5s再运行一次线程，构成了循环的效果//                        handler.postDelayed(this,5000);//                        handler.removeCallbacks(this);////                    }//                };////                handler.post(runnable); //启动线程////            }//        }        if (mdata2.size() > 0) {        } else {            for (int i = 0; i < 25; i++) {                CodeParam codeParam = new CodeParam();//                codeParam.setId("");                codeParam.setId(i + 1 + "");                codeParam.setTag(i + 1);                codeParam.setUid(String.valueOf(i + 1));                codeParam.setDec("");                mdata2.add(codeParam);                data2.add(("" + (i + 1)));            }        }        mAdapter2.setNewData(mdata2);//模拟网络请求成功后要调用这个方法刷新数据        mRecyclerView.setAdapter(mAdapter2);    }    @Override    public void onDestroyView() {        super.onDestroyView();        unbinder.unbind();    }    //如果你需要考虑更好的体验，可以这么操作    @Override    public void onStart() {        super.onStart();        //开始轮播        // mBanner.startAutoPlay();    }    @Override    public void onStop() {        super.onStop();        //结束轮播        // mBanner.stopAutoPlay();    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        /*******************************************i**************************/        if (resultCode != RESULT_OK || data == null) {            return;        }        if (requestCode == REQUEST_CODE_SCAN_ONE) {//            HmsScan obj = data.getParcelableExtra(ScanUtil.RESULT);            HmsScan obj = data.getParcelableExtra(ScanUtil.RESULT);            if (obj != null) {                /*************************this*/                /*************************this*///                /**/newguntcode.setText(obj.originalValue);//                int POSITION = new Long(data.getLongExtra(Constant.POSITION, 0)).intValue();//                Toast.makeText(getActivity(), obj.originalValue, Toast.LENGTH_SHORT).show();//                Toast.makeText(getActivity(), (int) POSITION_1, Toast.LENGTH_LONG).show();                Log.d(TAG, "onActivityResult: " + POSITION_1);//                Toast.makeText(this,obj.originalValue,Toast.LENGTH_SHORT).show();                /*****/                String content = obj.originalValue;                if (ByteUtils.judgeContainsStr(content)) {                    Toast toast = Toast.makeText(getContext(),                            "获取的码值必须位1-65535数字！", Toast.LENGTH_LONG);                    ByteUtils.showMyToast(toast, 3 * 1000);                } else {//                    int LOCATION = data.getIntExtra(Constant.LOCATION, 0);//                    int POSITION = new Long(data.getLongExtra(Constant.POSITION, 0)).intValue();                    /*****///                    POSITION = POSITION;                    Bundle bundle = new Bundle();                    bundle.putString("code", content);                    if (LOCATION == 1) {                        CodeParam codeParam1 = mdata.get((int) POSITION_1 - 1);                        codeParam1.setDec(content);                        mdata.set((int) POSITION_1 - 1, codeParam1);                        mAdapter.notifyItemChanged((int) POSITION_1 - 1);                        if (!file1.contains("" + (int) POSITION_1)) {                            file1.add("" + (int) POSITION_1);                        }                    } else {                        CodeParam codeParam1 = mdata2.get((int) POSITION_1 - 1);                        codeParam1.setDec(content);                        mdata2.set((int) POSITION_1 - 1, codeParam1);                        mAdapter2.notifyItemChanged((int) POSITION_1 - 1);                        if (!file2.contains("" + (int) POSITION_1)) {                            file2.add("" + (int) POSITION_1);                        }                    }                }                /*****/            }        }/****************************************************************************************************************/        // 扫描二维码/条码回传        if (requestCode == REQUEST_CODE_SCAN && resultCode == RESULT_OK) {            if (data != null) {                String content = data.getStringExtra(Constant.CODED_CONTENT);//				if(!content.equals("")){//////					int length=content.length();////					if(length<5){////						Toast toast=Toast.makeText(getContext(),//								"获取的码值必须大于5位数！", Toast.LENGTH_LONG);//						ByteUtils.showMyToast(toast, 3*1000);//					}else {////						content = content.substring(length - 5, length);//					}//////				}                if (ByteUtils.judgeContainsStr(content)) {                    Toast toast = Toast.makeText(getContext(),                            "获取的码值必须位1-65535数字！", Toast.LENGTH_LONG);                    ByteUtils.showMyToast(toast, 3 * 1000);                } else {                    int LOCATION = data.getIntExtra(Constant.LOCATION, 0);                    int POSITION = new Long(data.getLongExtra(Constant.POSITION, 0)).intValue();                    Bundle bundle = new Bundle();                    bundle.putString("code", content);                    if (LOCATION == 1) {                        CodeParam codeParam1 = mdata.get(POSITION - 1);                        codeParam1.setDec(content);                        mdata.set(POSITION - 1, codeParam1);                        mAdapter.notifyItemChanged(POSITION - 1);                        if (!file1.contains("" + POSITION)) {                            file1.add("" + POSITION);                        }                    } else {                        CodeParam codeParam1 = mdata2.get(POSITION - 1);                        codeParam1.setDec(content);                        mdata2.set(POSITION - 1, codeParam1);                        mAdapter2.notifyItemChanged(POSITION - 1);                        if (!file2.contains("" + POSITION)) {                            file2.add("" + POSITION);                        }                    }                }                //result.setText("扫描结果为：" + content);            }        }    }    @Override    public void onclicked(boolean sj) {        if (sj) {            if (mainActivity.mSerial.isConnected()) {                Drawable leftDrawable = getResources().getDrawable(R.drawable.selecttag);                leftDrawable.setBounds(0, 0, 40, 40);                if (farthtext != null) {                    farthtext.setCompoundDrawables(null, null, leftDrawable, null);                }            }        } else {            Drawable leftDrawable = getResources().getDrawable(R.drawable.tag);            leftDrawable.setBounds(0, 0, 40, 40);            if (farthtext != null) {                farthtext.setCompoundDrawables(null, null, leftDrawable, null);            }        }    }}